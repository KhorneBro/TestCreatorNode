{"ast":null,"code":"import { useCallback, useState } from 'react';\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    setLoading(true);\n\n    try {\n      if (body) {\n        body = JSON.stringify(body);\n        headers['Content-Type'] = 'application/json';\n      }\n\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      const data = await response.json(); // let newData;\n      // newData = [];\n      // let newData = data.errors.map(() => {\n      //     if (data.errors[0].param === 'email') {\n      //         newData[0] = data.errors[0].msg\n      //         newData[1] = data.errors[1].msg\n      //     }\n      //     if (data.errors[0].param === 'password'){\n      //         newData[1] = data.errors[0].msg\n      //     }\n      // })\n\n      if (!response.ok) {\n        throw new Error(data || 'Что-то пошло не так');\n      }\n\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  const clearError = useCallback(() => setError(null), []);\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  };\n};","map":{"version":3,"sources":["D:/Program Files/OpenServer/domains/rebuildTCN/client/src/hooks/http.hook.js"],"names":["useCallback","useState","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","JSON","stringify","response","fetch","data","json","ok","Error","e","message","clearError"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,QAArB,QAAoC,OAApC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AACzB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,KAAD,CAAlC;AAEA,QAAMM,OAAO,GAAGP,WAAW,CAAC,OAAOQ,GAAP,EAAYC,MAAM,GAAG,KAArB,EAA4BC,IAAI,GAAG,IAAnC,EAAyCC,OAAO,GAAG,EAAnD,KAA0D;AAClFP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACA,UAAIM,IAAJ,EAAU;AACNA,QAAAA,IAAI,GAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP;AACAC,QAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;AACH;;AACD,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,EAAM;AAACC,QAAAA,MAAD;AAASC,QAAAA,IAAT;AAAeC,QAAAA;AAAf,OAAN,CAA5B;AACA,YAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CANA,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAI,CAACH,QAAQ,CAACI,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAUH,IAAI,IAAI,qBAAlB,CAAN;AACH;;AAGDZ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOY,IAAP;AACH,KA3BD,CA2BE,OAAOI,CAAP,EAAU;AACRhB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACc,CAAC,CAACC,OAAH,CAAR;AACA,YAAMD,CAAN;AACH;AACJ,GAlC0B,EAkCxB,EAlCwB,CAA3B;AAoCA,QAAME,UAAU,GAAGtB,WAAW,CAAC,MAAMM,QAAQ,CAAC,IAAD,CAAf,EAAuB,EAAvB,CAA9B;AAEA,SAAO;AAACH,IAAAA,OAAD;AAAUI,IAAAA,OAAV;AAAmBF,IAAAA,KAAnB;AAA0BiB,IAAAA;AAA1B,GAAP;AACH,CA3CM","sourcesContent":["import {useCallback, useState} from 'react'\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(false)\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n        setLoading(true)\r\n        try {\r\n            if (body) {\r\n                body = JSON.stringify(body)\r\n                headers['Content-Type'] = 'application/json'\r\n            }\r\n            const response = await fetch(url, {method, body, headers})\r\n            const data = await response.json()\r\n\r\n            // let newData;\r\n            // newData = [];\r\n            // let newData = data.errors.map(() => {\r\n            //     if (data.errors[0].param === 'email') {\r\n            //         newData[0] = data.errors[0].msg\r\n            //         newData[1] = data.errors[1].msg\r\n            //     }\r\n            //     if (data.errors[0].param === 'password'){\r\n            //         newData[1] = data.errors[0].msg\r\n            //     }\r\n            // })\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data || 'Что-то пошло не так')\r\n            }\r\n\r\n\r\n            setLoading(false)\r\n            return data\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return {loading, request, error, clearError}\r\n}"]},"metadata":{},"sourceType":"module"}